// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.1
// source: share.proto

package sharepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShareService_CreateShare_FullMethodName    = "/share.ShareService/CreateShare"
	ShareService_GetShareInfo_FullMethodName   = "/share.ShareService/GetShareInfo"
	ShareService_ValidateAccess_FullMethodName = "/share.ShareService/ValidateAccess"
)

// ShareServiceClient is the client API for ShareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务定义
type ShareServiceClient interface {
	CreateShare(ctx context.Context, in *CreateShareRequest, opts ...grpc.CallOption) (*CreateShareResponse, error)
	GetShareInfo(ctx context.Context, in *GetShareInfoRequest, opts ...grpc.CallOption) (*GetShareInfoResponse, error)
	ValidateAccess(ctx context.Context, in *ValidateAccessRequest, opts ...grpc.CallOption) (*ValidateAccessResponse, error)
}

type shareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShareServiceClient(cc grpc.ClientConnInterface) ShareServiceClient {
	return &shareServiceClient{cc}
}

func (c *shareServiceClient) CreateShare(ctx context.Context, in *CreateShareRequest, opts ...grpc.CallOption) (*CreateShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShareResponse)
	err := c.cc.Invoke(ctx, ShareService_CreateShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) GetShareInfo(ctx context.Context, in *GetShareInfoRequest, opts ...grpc.CallOption) (*GetShareInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShareInfoResponse)
	err := c.cc.Invoke(ctx, ShareService_GetShareInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) ValidateAccess(ctx context.Context, in *ValidateAccessRequest, opts ...grpc.CallOption) (*ValidateAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccessResponse)
	err := c.cc.Invoke(ctx, ShareService_ValidateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareServiceServer is the server API for ShareService service.
// All implementations must embed UnimplementedShareServiceServer
// for forward compatibility.
//
// 服务定义
type ShareServiceServer interface {
	CreateShare(context.Context, *CreateShareRequest) (*CreateShareResponse, error)
	GetShareInfo(context.Context, *GetShareInfoRequest) (*GetShareInfoResponse, error)
	ValidateAccess(context.Context, *ValidateAccessRequest) (*ValidateAccessResponse, error)
	mustEmbedUnimplementedShareServiceServer()
}

// UnimplementedShareServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShareServiceServer struct{}

func (UnimplementedShareServiceServer) CreateShare(context.Context, *CreateShareRequest) (*CreateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShare not implemented")
}
func (UnimplementedShareServiceServer) GetShareInfo(context.Context, *GetShareInfoRequest) (*GetShareInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareInfo not implemented")
}
func (UnimplementedShareServiceServer) ValidateAccess(context.Context, *ValidateAccessRequest) (*ValidateAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccess not implemented")
}
func (UnimplementedShareServiceServer) mustEmbedUnimplementedShareServiceServer() {}
func (UnimplementedShareServiceServer) testEmbeddedByValue()                      {}

// UnsafeShareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareServiceServer will
// result in compilation errors.
type UnsafeShareServiceServer interface {
	mustEmbedUnimplementedShareServiceServer()
}

func RegisterShareServiceServer(s grpc.ServiceRegistrar, srv ShareServiceServer) {
	// If the following call pancis, it indicates UnimplementedShareServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShareService_ServiceDesc, srv)
}

func _ShareService_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_CreateShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).CreateShare(ctx, req.(*CreateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_GetShareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).GetShareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_GetShareInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).GetShareInfo(ctx, req.(*GetShareInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_ValidateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).ValidateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareService_ValidateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).ValidateAccess(ctx, req.(*ValidateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShareService_ServiceDesc is the grpc.ServiceDesc for ShareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "share.ShareService",
	HandlerType: (*ShareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShare",
			Handler:    _ShareService_CreateShare_Handler,
		},
		{
			MethodName: "GetShareInfo",
			Handler:    _ShareService_GetShareInfo_Handler,
		},
		{
			MethodName: "ValidateAccess",
			Handler:    _ShareService_ValidateAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "share.proto",
}
